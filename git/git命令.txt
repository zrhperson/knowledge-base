Git是一个开源的分布式版本控制系统


npm run myDev  cnpm i   npm run compile(更新库)


git 工作流程
------------------------------------------

1.初始化工程 
  
  git init  
  
  git --bare init

2.检出仓库 

  git clone /path/to/repository 

  git clone username@host:/path/to/repository 远程仓库

  例如：git@192.168.1.101:/data/git/react.git

3.添加和提交

  git add <filename> or <path>

  git add *

1.  git add -A   保存所有的修改
2.  git add .     保存新的添加和修改，但是不包括删除
3.  git add -u   保存修改和删除，但是不包括新建文件。

  git commit -m "代码提交信息"

  git commit -a -m "代码提交信息" 跳过add过程

  -a不会造成新文件被提交，只能修改

4.推送改动

  git push origin master

  git remote add origin <server> 添加到远程分支

5.分支

  git branch -a 查看所有分支

  git branch <branch> 创建分支

  git checkout -b feature_x 创建分支并切换

  git checkout master 切换回主分支

  git branch -d feature_x 删除分支

  git push origin <branch> 推送仓库分支

6.更新合并

  git pull 更新并合并	

  git fetch 获取更新到本地仓库

  git merge <branch> 合并分支

  git diff <source_branch> <target_branch>  比较差异

  git diff --cached 查看已缓存的改动

  git diff --stat 显示摘要而非整个
  
  git diff HEAD 查看已缓存的与未缓存的所有改动  

  git diff master orgin/master


7.标签

  git tag -a <tagname> -m "message"

  git tag 1.0.0 1b2e1d63ff

  git log 获取提交ID

8.替换本地改动

  git checkout -- <filename>

  git fetch origin
  
  git reset --hard origin/master 重新指向
  git reset --hard <commit_id> 指定版本

  git reset head file 重置指定文件

9.删除

  git rm

  git rm --cached 去除缓存区文件


10.查看历史或状态

  git log --oneline

  git reflog 记录每一次命令

  git status  查看当前工作区状态


11.忽略文件

  touch .gitignore 创建忽略文件

  --config

  	# 忽略*.o和*.a文件
  	*.[oa]

	# 忽略*.b和*.B文件，my.b除外
	*.[bB]
	!my.b

	# 忽略dbg文件和dbg目录
	dbg

	# 只忽略dbg目录，不忽略dbg文件
	dbg/

	# 只忽略dbg文件，不忽略dbg目录
	dbg
	!dbg/

	# 只忽略当前目录下的dbg文件和目录，子目录的dbg不在忽略范围内
	/dbg


12.config

  git config core.sparsecheckout true 允许指定检出
  echo "dir" >> .git/info/sparse-checkout

  git config color.ui true 彩色的 git 输出

  git config format.pretty oneline 显示历史记录时，每个提交的信息只显示一行

  git config --global user.name "Your Name"
  git config --global user.email "email@example.com"


13.stash

  git stash: 

	备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。

  git stash pop: 

	从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复

  git stash list: 

	显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复

  git stash clear:
	
	清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了


使用功能
------------------------------------------

1. $ ssh-keygen -t rsa -C "emaill" 生成ssh key

2. gitk 内建的图形化

3. git add -i 交互式添加文件到暂存区：

4. Esc + :wq + Enter 退出录入界面
